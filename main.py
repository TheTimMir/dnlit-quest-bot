import json
import logging
import asyncio
from collections import defaultdict
from typing import Dict, List

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

# ------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -------------------
file_handler = logging.FileHandler("bot.log", mode='a', encoding="utf-8")
console_handler = logging.StreamHandler()

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[file_handler, console_handler]
)
logger = logging.getLogger()

# ------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã -------------------
TOKEN = "YOUR-TOKEN-HERE"
DATA_FILE = "data.json"
ADMIN_ID = -1 #YOUR-ADMIN-ID-HERE

reply_after_photo = (
    "üß≠ –í–∞—à –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø—É–Ω–∫—Ç ‚Äî <b><i>–Ω–∞–π–¥–∞–≤–Ω—ñ—à–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –Ω–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞</i></b>. "
    "–¢–∞–º –≤–∏ –º–∞—î—Ç–µ –∑–Ω–∞–π—Ç–∏ –ª—é–¥–∏–Ω—É, <b>—è–∫–∞ —Å–≤–æ—ó–º —Ä–µ–º–µ—Å–ª–æ–º –¥–∞–ª–∞ –ø–æ—à—Ç–æ–≤—Ö –¥–æ –ø–æ—è–≤–∏ –ø–µ—Ä—à–∏—Ö –ø–æ—Å–µ–ª–µ–Ω—å –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –º—ñ—Å—Ç–∞ –î–Ω—ñ–ø—Ä–æ.</b>"
)

reply_after_institute = (
    "üìö –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫ ‚Äî —Ä—É—à–∞–π—Ç–µ –¥–æ –≤–∞—à–æ—ó —Ç–µ–ø–µ—Ä—ñ—à–Ω—å–æ—ó <b>Alma Mater</b>. "
)

reply_after_mist = (
    "üñºÔ∏è –£–≤–∞–∂–Ω–æ –≤–∏–≤—á—ñ—Ç—å —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –¢—É—Ç —Å—Ö–æ–≤–∞–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∑ —Ç–≤–æ—Ä—ñ–≤, —â–æ –Ω–µ —Ç–µ—Ä–ø–ª—è—Ç—å —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è. "
    "–ó–Ω–∞–π–¥—ñ—Ç—å —Å–ø—Ä–∞–≤–∂–Ω—î —Å–µ—Ä–µ–¥ –ø—ñ–¥—Ä–æ–±–æ–∫."
)

reply_after_kazka = (
    "üìñ –ù–∞—Å—Ç—É–ø–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ ‚Äî –º—ñ—Å—Ü–µ, –¥–µ –∫–∞–∑–∫–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∂–∏–≤—É—Ç—å, –∞ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö. "
    "–í–∏—Ä—É—à–∞–π—Ç–µ —Ç—É–¥–∏, –¥–µ –æ–∂–∏–≤–∞—î –¥–∏—Ç—è—á–∞ —É—è–≤–∞."
)

reply_after_code = (
    "üìç –ù–∞ –∫–∞—Ä—Ç—ñ –≤–∫–∞–∑–∞–Ω–æ —Ç–æ—á–∫—É. –ó–Ω–∞–π–¥—ñ—Ç—å –º—ñ—Å—Ü–µ, –¥–µ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–∏—Ç—è—á—ñ —Å–ø–æ–≥–∞–¥–∏ —Ç–∞ —Ä—É—Ö. "
    "–í–æ–Ω–æ –∑–æ–≤—Å—ñ–º –ø–æ—Ä—è–¥ –∑ —Ç–∏–º, –∑–≤—ñ–¥–∫–∏ –≤—Å–µ –ø–æ—á–∏–Ω–∞–ª–æ—Å—è..."
)

reply_after_crossroad = (
    "üõ§Ô∏è –î–≤–∞ —à–ª—è—Ö–∏ –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è, —è–∫ –≤—ñ—Ä—à—ñ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ. "
    "–ó–Ω–∞–π–¥—ñ—Ç—å –º—ñ—Å—Ü–µ, –¥–µ —Ü—ñ —à–ª—è—Ö–∏ –≤–µ–¥—É—Ç—å –¥–æ –Ω–æ–≤–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤."
)

valid_teams = {"9A", "9B", "10A", "10B", "10G"}
team_members = {}  # –ó–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ create_storage()
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))


# ------------------- –•—Ä–∞–Ω–∏–ª–∏—â–µ -------------------
def create_storage() -> Dict[str, List[int]]:
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
            return defaultdict(list, {k: list(set(v)) for k, v in raw.items()})
    except FileNotFoundError:
        return {
            "9A": [],
            "9B": [],
            "10A": [],
            "10B": [],
            "10G": [],
            "other": [],
            "admin": [admin_id],
        }


def save_storage(data: Dict[str, List[int]]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# ------------------- –•–µ–ª–ø–µ—Ä–∏ -------------------
def add_user_to_team(team_code: str, user_id: int):
    if user_id not in team_members[team_code]:
        team_members[team_code].append(user_id)
        save_storage(team_members)
        logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤ –∫–æ–º–∞–Ω–¥—É %s", user_id, team_code)


def get_user_team(user_id: int):
    for code, members in team_members.items():
        if user_id in members:
            return code
    return None


async def notify_team(team_code: str, text: str):
    for user_id in team_members.get(team_code, []):
        try:
            await bot.send_message(user_id, text, disable_web_page_preview=True)
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s: %s", user_id, e)


def start_message(team_code: str) -> str:
    return (
        f"üëã –í—ñ—Ç–∞—î–º–æ —É –∑–∞—Ö–æ–ø–ª–∏–≤–æ–º—É –∫–≤–µ—Å—Ç—ñ <b>–û—Å–≤—ñ—Ç–Ω—ñ–π –¥–µ—Ç–µ–∫—Ç–∏–≤ –î–ù–õ–Ü–¢: –¢–∞—î–º–Ω–∏—Ü—ñ –î–Ω—ñ–ø—Ä–∞</b>! \n"
        f"–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: <b>{team_code}</b>\n\n"
        "üìå <b>–Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç?</b>\n"
        "–ü—Ä–æ—Ç—è–≥–æ–º –∫–≤–µ—Å—Ç—É –≤–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—Ç–µ —Å–ª–æ–≤–∞, –∫–æ–¥–∏ —á–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —ó—Ö –±–æ—Ç—É ‚Äî "
        "—É —Ä–∞–∑—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É. –Ø–∫—â–æ –∫–æ–¥ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ‚Äî –±–æ—Ç –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å –ø—Ä–æ —Ü–µ.\n\n"
        "‚ö†Ô∏è <b>–£–í–ê–ì–ê: –ü—ñ–¥ —á–∞—Å –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ –∫–≤–µ—Å—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è!</b> \n"
        "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≤–∏–Ω–Ω–∞ –Ω–µ–≥–∞–π–Ω–æ –ø—Ä–æ–π—Ç–∏ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —É–∫—Ä–∏—Ç—Ç—è —Ç–∞ —á–µ–∫–∞—Ç–∏ –Ω–∞ –≤—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏.\n\n"
        "üõ° <b>–ú—ñ—Å—Ü—è —É–∫—Ä–∏—Ç—Ç—ñ–≤:</b>\n"
        "‚Ä¢ <b>–®–∫–æ–ª–∞ ‚Ññ67</b> - –ø—Ä–æ–≤. –Ñ–≤–≥–µ–Ω–∞ –ö–æ–Ω–æ–≤–∞–ª—å—Ü—è, 6 \n"
        "‚Ä¢ <b>–ù–∞—Ü. —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç</b> - –ø—Ä–æ—Å–ø. –î–º–∏—Ç—Ä–∞ –Ø–≤–æ—Ä–Ω–∏—Ü—å–∫–æ–≥–æ, 19\n"
        "‚Ä¢ <b>–î–Ω—ñ–ø—Ä–æ–≤—Å—å–∫–∏–π —Ö—É–¥–æ–∂–Ω—ñ–π –º—É–∑–µ–π</b> - –≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 21\n"
        "‚Ä¢ <b>–í–æ–ª–µ–π–ö–∞–º–ø</b> - –≤—É–ª. –í–æ–ª–æ–¥–∏–º–∏—Ä–∞ –í–µ—Ä–Ω–∞–¥—Å—å–∫–æ–≥–æ, 6\n"
        "‚ÄºÔ∏è –£ –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ —â–æ—Å—å –Ω–µ –ø—Ä–∞—Ü—é—î –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: @TheTimMir"
    )


# ------------------- –•–µ–Ω–¥–ª–µ—Ä–∏ -------------------
router = Router()


@router.callback_query(F.data.startswith("approve_"))
async def admin_approve(query: CallbackQuery):
    team_code = query.data.split("_")[1]
    await notify_team(team_code, reply_after_photo)
    await query.message.edit_caption("‚úÖ –§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É.")


@router.callback_query(F.data.startswith("reject_"))
async def admin_reject(query: CallbackQuery):
    team_code = query.data.split("_")[1]
    await notify_team(team_code, "‚ùå –í–∞—à–µ —Ñ–æ—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    await query.message.edit_caption("‚ùå –§–æ—Ç–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")


@router.message(F.text.casefold() == "—ñ–Ω—Å—Ç–∏—Ç—É—Ç")
async def handle_institute_word(message: Message):
    logger.info("üèõÔ∏è –°–ª–æ–≤–æ '—ñ–Ω—Å—Ç–∏—Ç—É—Ç' –æ—Ç %s", message.from_user.id)
    team_code = get_user_team(message.from_user.id)
    if not team_code:
        await message.answer("üö´ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞.")
        return
    await notify_team(team_code, reply_after_institute)


@router.message(F.text.casefold() == "–º—ñ—Å—Ç")
async def handle_mist(message: Message):
    team_code = get_user_team(message.from_user.id)
    logger.info("üñºÔ∏è –°–ª–æ–≤–æ '–º—ñ—Å—Ç' –æ—Ç %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s", message.from_user.id, team_code)
    photo = FSInputFile("media/mist.jpg")
    await message.reply_photo(photo, caption=reply_after_crossroad)

@router.message(F.text.casefold() == "–∫–∞–∑–∫–∞")
async def handle_kazka(message: Message):
    team_code = get_user_team(message.from_user.id)
    logger.info("üìö –°–ª–æ–≤–æ '–∫–∞–∑–∫–∞' –æ—Ç %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s", message.from_user.id, team_code)
    if not team_code:
        await message.answer("üö´ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞.")
        return
    await notify_team(team_code, reply_after_kazka)


@router.message(F.text.casefold().replace(" ", "").replace("\n", "") == "1–µ2–≥3–¥4–±5–∞6–≤")
@router.message(F.text.casefold().replace(" ", "").replace("\n", "") == "–µ–≥–¥–±–∞–≤")
async def handle_code(message: Message):
    team_code = get_user_team(message.from_user.id)
    logger.info("üì¶ –í–≤–µ–¥–µ–Ω–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –æ—Ç %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s", message.from_user.id, team_code)
    if not team_code:
        await message.answer("üö´ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞.")
        return
    await notify_team(team_code, reply_after_code)
    latitude, longitude = 48.460187, 35.062562
    for user_id in team_members.get(team_code, []):
        try:
            await bot.send_location(user_id, latitude, longitude)
            logger.info("üìç –õ–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s", user_id, team_code)
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s: %s", user_id, team_code, e)


@router.message(F.text.startswith("/start"))
async def handle_start(message: Message):
    parts = message.text.split()
    team_code = parts[1] if len(parts) > 1 else None
    user_id = message.from_user.id

    if not team_code or team_code not in valid_teams:
        if user_id not in team_members["other"]:
            team_members["other"].append(user_id)
            save_storage(team_members)
            logger.warning("‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–ø–∞–ª –≤ –≥—Ä—É–ø–ø—É 'other'", user_id)
        await message.answer("‚ö†Ô∏è –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ—Å–∫–∞–Ω—É–π—Ç–µ QR-–∫–æ–¥ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    add_user_to_team(team_code, user_id)
    logger.info("üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É %s", user_id, team_code)
    await message.answer(start_message(team_code))


@router.message(F.text.startswith("/bc"))
async def handle_admin_broadcast(message: Message):
    if message.from_user.id not in [admin_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    text = message.text[len("/bc "):].strip()
    if not text:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    coordinator_message = f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {text}"
    for team, members in team_members.items():
        for user_id in members:
            try:
                await bot.send_message(user_id, coordinator_message, disable_web_page_preview=True)
                logger.info("üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s", user_id, team)
            except Exception as e:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s: %s", user_id, team, e)
    await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")


@router.message(F.text.startswith("/msg"))
async def handle_team_notify(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –∫–æ–¥ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        return
    team_code, text = parts[1], parts[2]
    if team_code not in valid_teams:
        await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥–∏.")
        return
    coordinator_message = f"üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {text}"
    await notify_team(team_code, coordinator_message)
    logger.info("üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥—ñ %s", team_code)
    await message.answer(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥—ñ {team_code}.")


@router.message(F.text.startswith("/list"))
async def handle_list_users(message: Message):
    if message.from_user.id not in [admin_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    response = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
    for team, members in team_members.items():
        response += f"\n<b>–ö–æ–º–∞–Ω–¥–∞ {team} ({len(members)}):</b>\n"
        if members:
            for user_id in members:
                try:
                    user = await bot.get_chat(user_id)
                    response += f"- {user.first_name} {user.last_name or ''} ({user_id})\n"
                    logger.info("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s: %s %s", user_id, team, user.first_name, user.last_name or '')
                except Exception as e:
                    logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s: %s", user_id, team, e)
                    response += f"- {user_id} (–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)\n"
        else:
            response += "–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
        response += "\n"
    await message.answer(response, parse_mode=ParseMode.HTML)


@router.message(F.text.startswith("/rem"))
async def handle_remove_user(message: Message):
    if message.from_user.id not in [admin_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è.")
        return
    user_id = int(parts[1])
    moved = False
    for team, members in team_members.items():
        if user_id in members:
            members.remove(user_id)
            moved = True
            logger.info("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∑ –∫–æ–º–∞–Ω–¥–∏ %s –¥–æ –≥—Ä—É–ø–∏ 'other'", user_id, team)
    if moved:
        team_members["other"].append(user_id)
        save_storage(team_members)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –¥–æ –≥—Ä—É–ø–∏ 'other'.")
    else:
        await message.answer("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω—ñ–π –∫–æ–º–∞–Ω–¥—ñ.")


@router.message(F.text.startswith("/add"))
async def handle_add_user(message: Message):
    if message.from_user.id not in [admin_id]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫–æ–¥ –∫–æ–º–∞–Ω–¥–∏.")
        return
    user_id, team_code = int(parts[1]), parts[2]
    if team_code not in valid_teams:
        await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥–∏.")
        return
    if user_id not in team_members[team_code]:
        team_members[team_code].append(user_id)
        save_storage(team_members)
        await bot.send_message(user_id, f"‚úÖ –í–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ –∫–æ–º–∞–Ω–¥–∏ {team_code}.")
        # Notify admin about the new addition
        try:
            user = await bot.get_chat(user_id)
            admin_message = f"üë§ {user.first_name} {user.last_name or ''} ({user_id}) –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ–º–∞–Ω–¥–∏ {team_code}."
            await bot.send_message(admin_id, admin_message)
            logger.info("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ–º–∞–Ω–¥–∏ %s: %s %s", user_id, team_code, user.first_name, user.last_name or '')
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s: %s", user_id, team_code, e)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ–º–∞–Ω–¥–∏ {team_code}.")
    else:
        await message.answer(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ —î –≤ –∫–æ–º–∞–Ω–¥—ñ {team_code}.")


@router.message(F.photo)
async def handle_admin_image(message: Message):
    team_code = get_user_team(message.from_user.id)
    if message.from_user.id != admin_id:
        logger.info("üì∏ –§–æ—Ç–æ –æ—Ç %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s", message.from_user.id, team_code)
        if not team_code:
            await message.answer("üö´ –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞.")
            return
        await message.answer("‚è≥ –í–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.")
        approve_button = InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{team_code}")
        reject_button = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{team_code}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[approve_button, reject_button]])
        await bot.send_photo(admin_id, message.photo[-1].file_id, caption=f"–§–æ—Ç–æ –æ—Ç –∫–æ–º–∞–Ω–¥—ã {team_code}. –û–¥–æ–±—Ä–∏—Ç—å?", reply_markup=keyboard)
        return
    
    team_code = message.caption.strip()
    
    for user_id in team_members.get(team_code, []):
        try:
            await bot.send_photo(user_id, message.photo[-1].file_id, caption=f"üòâ –°–ø—Ä–æ–±—É–π—Ç–µ —Ä–æ–∑–≥–∞–¥–∞—Ç–∏ —Ü–µ–π —Ä–µ–±—É—Å, —â–æ —î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∫–æ–¥–æ–º.")
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ %s: %s", user_id, e)
    
    await message.answer(f"‚úÖ –§–æ—Ç–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ–º–∞–Ω–¥—ñ {team_code}.")


@router.message(F.text)
async def fallback_handler(message: Message):
    team_code = get_user_team(message.from_user.id)
    logger.info("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ %s –≤ –∫–æ–º–∞–Ω–¥—ñ %s: %s", message.from_user.id, team_code, message.text)
    await message.answer("‚ö†Ô∏è –©–æ—Å—å –Ω–µ —Ç–µ. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")


# ------------------- Main -------------------
async def main():
    global team_members
    logger.info("Main starting!")
    team_members = create_storage()

    for special in ("admin", "other"):
        if special not in team_members:
            team_members[special] = []

    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
